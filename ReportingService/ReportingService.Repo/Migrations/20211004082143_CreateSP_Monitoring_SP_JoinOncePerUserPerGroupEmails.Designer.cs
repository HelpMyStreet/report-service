// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ReportingService.Repo;

namespace ReportingService.Repo.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20211004082143_CreateSP_Monitoring_SP_JoinOncePerUserPerGroupEmails")]
    partial class CreateSP_Monitoring_SP_JoinOncePerUserPerGroupEmails
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Scaffolding.Models.ActivityCredentialSet", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnName("GroupID")
                        .HasColumnType("int");

                    b.Property<int>("ActivityId")
                        .HasColumnName("ActivityID")
                        .HasColumnType("int");

                    b.Property<int>("CredentialSetId")
                        .HasColumnName("CredentialSetID")
                        .HasColumnType("int");

                    b.Property<int>("SysChangeVersion")
                        .HasColumnName("SYS_CHANGE_VERSION")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("SysChangeOperation")
                        .IsRequired()
                        .HasColumnName("SYS_CHANGE_OPERATION")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("GroupId", "ActivityId", "CredentialSetId", "SysChangeVersion");

                    b.ToTable("ActivityCredentialSet","Group");
                });

            modelBuilder.Entity("Scaffolding.Models.ActivityQuestions", b =>
                {
                    b.Property<int>("RequestFormVariantId")
                        .HasColumnName("RequestFormVariantID")
                        .HasColumnType("int");

                    b.Property<int>("ActivityId")
                        .HasColumnName("ActivityID")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnName("QuestionID")
                        .HasColumnType("int");

                    b.Property<int>("SysChangeVersion")
                        .HasColumnName("SYS_CHANGE_VERSION")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("Required")
                        .HasColumnType("int");

                    b.Property<string>("SysChangeOperation")
                        .IsRequired()
                        .HasColumnName("SYS_CHANGE_OPERATION")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("RequestFormVariantId", "ActivityId", "QuestionId", "SysChangeVersion");

                    b.ToTable("ActivityQuestions","QuestionSet");
                });

            modelBuilder.Entity("Scaffolding.Models.AddressDetail", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("SysChangeVersion")
                        .HasColumnName("SYS_CHANGE_VERSION")
                        .HasColumnType("int");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("AddressLine2")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("AddressLine3")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime>("DateFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("Locality")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("PostcodeId")
                        .HasColumnType("int");

                    b.Property<string>("SysChangeOperation")
                        .IsRequired()
                        .HasColumnName("SYS_CHANGE_OPERATION")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("Id", "SysChangeVersion");

                    b.ToTable("AddressDetail","Address");
                });

            modelBuilder.Entity("Scaffolding.Models.ChampionPostcode", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("UserID")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<int>("SysChangeVersion")
                        .HasColumnName("SYS_CHANGE_VERSION")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("SysChangeOperation")
                        .IsRequired()
                        .HasColumnName("SYS_CHANGE_OPERATION")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("UserId", "PostalCode", "SysChangeVersion");

                    b.ToTable("ChampionPostcode","User");
                });

            modelBuilder.Entity("Scaffolding.Models.CommunicationMessage", b =>
                {
                    b.Property<string>("MessageId")
                        .HasColumnName("MessageID")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Comments")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<bool?>("MatchedToExpectedEmail")
                        .HasColumnType("bit");

                    b.HasKey("MessageId")
                        .HasName("PK_CommMess");

                    b.ToTable("CommunicationMessage","Monitoring");
                });

            modelBuilder.Entity("Scaffolding.Models.Credential", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("int");

                    b.Property<int>("SysChangeVersion")
                        .HasColumnName("SYS_CHANGE_VERSION")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("SysChangeOperation")
                        .IsRequired()
                        .HasColumnName("SYS_CHANGE_OPERATION")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("Id", "SysChangeVersion");

                    b.ToTable("Credential","Group");
                });

            modelBuilder.Entity("Scaffolding.Models.CredentialSet", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnName("GroupID")
                        .HasColumnType("int");

                    b.Property<int>("CredentialId")
                        .HasColumnName("CredentialID")
                        .HasColumnType("int");

                    b.Property<int>("SysChangeVersion")
                        .HasColumnName("SYS_CHANGE_VERSION")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("SysChangeOperation")
                        .IsRequired()
                        .HasColumnName("SYS_CHANGE_OPERATION")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("Id", "GroupId", "CredentialId", "SysChangeVersion");

                    b.ToTable("CredentialSet","Group");
                });

            modelBuilder.Entity("Scaffolding.Models.CredentialTypes", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("int");

                    b.Property<int>("SysChangeVersion")
                        .HasColumnName("SYS_CHANGE_VERSION")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SysChangeOperation")
                        .IsRequired()
                        .HasColumnName("SYS_CHANGE_OPERATION")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("Id", "SysChangeVersion");

                    b.ToTable("CredentialTypes","Lookup");
                });

            modelBuilder.Entity("Scaffolding.Models.DueDateType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("int");

                    b.Property<int>("SysChangeVersion")
                        .HasColumnName("SYS_CHANGE_VERSION")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SysChangeOperation")
                        .IsRequired()
                        .HasColumnName("SYS_CHANGE_OPERATION")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("Id", "SysChangeVersion");

                    b.ToTable("DueDateType","Lookup");
                });

            modelBuilder.Entity("Scaffolding.Models.EmailTemplates", b =>
                {
                    b.Property<string>("TemplateName")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("DateLastModified")
                        .HasColumnType("datetime");

                    b.Property<string>("GroupName")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("TemplateName")
                        .HasName("PK__EmailTem__A6C2DA676F71E846");

                    b.ToTable("EmailTemplates","Analysis");
                });

            modelBuilder.Entity("Scaffolding.Models.EmailUnsubscribes", b =>
                {
                    b.Property<DateTime?>("DateFrom")
                        .HasColumnType("datetime");

                    b.Property<string>("Event")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("EventDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<int?>("JobId")
                        .HasColumnType("int");

                    b.Property<string>("MessageId")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("RecipientUserId")
                        .HasColumnName("RecipientUserID")
                        .HasColumnType("int");

                    b.Property<int?>("RequestId")
                        .HasColumnType("int");

                    b.Property<string>("TemplateName")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.ToTable("EmailUnsubscribes","Monitoring");
                });

            modelBuilder.Entity("Scaffolding.Models.Event", b =>
                {
                    b.Property<DateTime>("DateFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Event1")
                        .HasColumnName("Event")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("EventDate")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("GroupId")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("JobId")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("MessageId")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("RecipientUserId")
                        .HasColumnName("RecipientUserID")
                        .HasColumnType("int");

                    b.Property<string>("RequestId")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("TemplateName")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.ToTable("Event","Communication");
                });

            modelBuilder.Entity("Scaffolding.Models.EventHistory", b =>
                {
                    b.Property<DateTime>("DateFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Event")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("EventDate")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("GroupId")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("JobId")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("MessageId")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("RecipientUserId")
                        .HasColumnName("RecipientUserID")
                        .HasColumnType("int");

                    b.Property<string>("RequestId")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("TemplateName")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.ToTable("EventHistory","Communication");
                });

            modelBuilder.Entity("Scaffolding.Models.ExpectedEmails", b =>
                {
                    b.Property<string>("Details")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("DistinctMessageIds")
                        .HasColumnName("DistinctMessageIDs")
                        .HasColumnType("int");

                    b.Property<int?>("EmailsExpected")
                        .HasColumnType("int");

                    b.Property<int?>("GroupId")
                        .HasColumnName("GroupID")
                        .HasColumnType("int");

                    b.Property<bool?>("Issue")
                        .HasColumnType("bit");

                    b.Property<string>("IssueDescription")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<int?>("JobId")
                        .HasColumnName("JobID")
                        .HasColumnType("int");

                    b.Property<bool?>("JoinUpdated")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("MinTimestampDelivered")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("MinTimestampDropped")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("MinTimestampInteraction")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("MinTimestampProcessed")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("RecipientEmailAddress")
                        .HasColumnType("binary(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1);

                    b.Property<int?>("RecipientOrder")
                        .HasColumnType("int");

                    b.Property<int?>("RecipientUserId")
                        .HasColumnName("RecipientUserID")
                        .HasColumnType("int");

                    b.Property<int?>("RequestId")
                        .HasColumnName("RequestID")
                        .HasColumnType("int");

                    b.Property<string>("SingleMessageId")
                        .HasColumnName("SingleMessageID")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("TemplateName")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("TimestampExpected")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Unsubscribed")
                        .HasColumnType("bit");

                    b.ToTable("ExpectedEmails","Monitoring");
                });

            modelBuilder.Entity("Scaffolding.Models.Feedback1", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SysChangeVersion")
                        .HasColumnName("SYS_CHANGE_VERSION")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("FeedbackDate")
                        .HasColumnType("datetime");

                    b.Property<byte?>("FeedbackRatingTypeId")
                        .HasColumnName("FeedbackRatingTypeID")
                        .HasColumnType("tinyint");

                    b.Property<int?>("JobId")
                        .HasColumnType("int");

                    b.Property<byte?>("RequestRoleTypeId")
                        .HasColumnName("RequestRoleTypeID")
                        .HasColumnType("tinyint");

                    b.Property<string>("SysChangeOperation")
                        .IsRequired()
                        .HasColumnName("SYS_CHANGE_OPERATION")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id", "SysChangeVersion");

                    b.ToTable("Feedback","Feedback");
                });

            modelBuilder.Entity("Scaffolding.Models.FeedbackRating", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("int");

                    b.Property<int>("SysChangeVersion")
                        .HasColumnName("SYS_CHANGE_VERSION")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SysChangeOperation")
                        .IsRequired()
                        .HasColumnName("SYS_CHANGE_OPERATION")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("Id", "SysChangeVersion");

                    b.ToTable("FeedbackRating","Lookup");
                });

            modelBuilder.Entity("Scaffolding.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("SysChangeVersion")
                        .HasColumnName("SYS_CHANGE_VERSION")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("FriendlyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GeographicName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupKey")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<string>("GroupName")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<byte?>("GroupType")
                        .HasColumnType("tinyint");

                    b.Property<bool?>("HomepageEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("JoinGroupPopUpDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkUrl")
                        .HasColumnName("LinkURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentGroupId")
                        .HasColumnType("int");

                    b.Property<bool?>("ShiftsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SysChangeOperation")
                        .IsRequired()
                        .HasColumnName("SYS_CHANGE_OPERATION")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<bool?>("TasksEnabled")
                        .HasColumnType("bit");

                    b.HasKey("Id", "SysChangeVersion");

                    b.ToTable("Group","Group");
                });

            modelBuilder.Entity("Scaffolding.Models.GroupCredential", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnName("GroupID")
                        .HasColumnType("int");

                    b.Property<int>("CredentialId")
                        .HasColumnName("CredentialID")
                        .HasColumnType("int");

                    b.Property<int>("SysChangeVersion")
                        .HasColumnName("SYS_CHANGE_VERSION")
                        .HasColumnType("int");

                    b.Property<byte?>("CredentialTypeId")
                        .HasColumnName("CredentialTypeID")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("CredentialVerifiedById")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("DateFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("HowToAchieve")
                        .HasColumnType("varchar(400)")
                        .HasMaxLength(400)
                        .IsUnicode(false);

                    b.Property<string>("HowToAchieveCtaDestination")
                        .HasColumnName("HowToAchieve_CTA_Destination")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("SysChangeOperation")
                        .IsRequired()
                        .HasColumnName("SYS_CHANGE_OPERATION")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("WhatIsThis")
                        .HasColumnType("varchar(400)")
                        .HasMaxLength(400)
                        .IsUnicode(false);

                    b.HasKey("GroupId", "CredentialId", "SysChangeVersion")
                        .HasName("PK_GROUP_CREDENTIAL");

                    b.ToTable("GroupCredential","Group");
                });

            modelBuilder.Entity("Scaffolding.Models.GroupEmailConfiguration", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GroupID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("CommunicationJobTypeId")
                        .HasColumnName("CommunicationJobTypeID")
                        .HasColumnType("tinyint");

                    b.Property<int>("SysChangeVersion")
                        .HasColumnName("SYS_CHANGE_VERSION")
                        .HasColumnType("int");

                    b.Property<string>("Configuration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("SysChangeOperation")
                        .IsRequired()
                        .HasColumnName("SYS_CHANGE_OPERATION")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("GroupId", "CommunicationJobTypeId", "SysChangeVersion");

                    b.ToTable("GroupEmailConfiguration","Group");
                });

            modelBuilder.Entity("Scaffolding.Models.GroupLocation", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnName("GroupID")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnName("LocationID")
                        .HasColumnType("int");

                    b.Property<int>("SysChangeVersion")
                        .HasColumnName("SYS_CHANGE_VERSION")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("SysChangeOperation")
                        .IsRequired()
                        .HasColumnName("SYS_CHANGE_OPERATION")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("GroupId", "LocationId", "SysChangeVersion")
                        .HasName("PK_GROUP_LOCATION");

                    b.ToTable("GroupLocation","Group");
                });

            modelBuilder.Entity("Scaffolding.Models.GroupMapDetails", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnName("GroupID")
                        .HasColumnType("int");

                    b.Property<byte>("MapLocationId")
                        .HasColumnName("MapLocationID")
                        .HasColumnType("tinyint");

                    b.Property<int>("SysChangeVersion")
                        .HasColumnName("SYS_CHANGE_VERSION")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(9, 6)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(9, 6)");

                    b.Property<string>("SysChangeOperation")
                        .IsRequired()
                        .HasColumnName("SYS_CHANGE_OPERATION")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<decimal?>("ZoomLevel")
                        .HasColumnType("decimal(9, 6)");

                    b.HasKey("GroupId", "MapLocationId", "SysChangeVersion")
                        .HasName("PK_GROUP_GROUP_MAP_DETAILS");

                    b.ToTable("GroupMapDetails","Group");
                });

            modelBuilder.Entity("Scaffolding.Models.GroupSupportActivityConfiguration", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GroupID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SupportActivityId")
                        .HasColumnName("SupportActivityID")
                        .HasColumnType("int");

                    b.Property<int>("SysChangeVersion")
                        .HasColumnName("SYS_CHANGE_VERSION")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<double?>("Radius")
                        .HasColumnType("float");

                    b.Property<short?>("SupportActivityInstructionsId")
                        .HasColumnName("SupportActivityInstructionsID")
                        .HasColumnType("smallint");

                    b.Property<string>("SysChangeOperation")
                        .IsRequired()
                        .HasColumnName("SYS_CHANGE_OPERATION")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("GroupId", "SupportActivityId", "SysChangeVersion")
                        .HasName("PK_GroupSupportActivityInstructions");

                    b.ToTable("GroupSupportActivityConfiguration","Group");
                });

            modelBuilder.Entity("Scaffolding.Models.GroupType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("int");

                    b.Property<int>("SysChangeVersion")
                        .HasColumnName("SYS_CHANGE_VERSION")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SysChangeOperation")
                        .IsRequired()
                        .HasColumnName("SYS_CHANGE_OPERATION")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("Id", "SysChangeVersion");

                    b.ToTable("GroupType","Lookup");
                });

            modelBuilder.Entity("Scaffolding.Models.Job", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("int");

                    b.Property<int>("SysChangeVersion")
                        .HasColumnName("SYS_CHANGE_VERSION")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Details")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime");

                    b.Property<byte?>("DueDateTypeId")
                        .HasColumnType("tinyint");

                    b.Property<bool?>("IsHealthCritical")
                        .HasColumnType("bit");

                    b.Property<byte?>("JobStatusId")
                        .HasColumnName("JobStatusID")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("NotBeforeDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RequestId")
                        .HasColumnType("int");

                    b.Property<byte?>("SupportActivityId")
                        .HasColumnName("SupportActivityID")
                        .HasColumnType("tinyint");

                    b.Property<string>("SysChangeOperation")
                        .IsRequired()
                        .HasColumnName("SYS_CHANGE_OPERATION")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<int?>("VolunteerUserId")
                        .HasColumnName("VolunteerUserID")
                        .HasColumnType("int");

                    b.HasKey("Id", "SysChangeVersion");

                    b.ToTable("Job","Request");
                });

            modelBuilder.Entity("Scaffolding.Models.JobAvailableToGroup", b =>
                {
                    b.Property<int>("JobId")
                        .HasColumnName("JobID")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnName("GroupID")
                        .HasColumnType("int");

                    b.Property<int>("SysChangeVersion")
                        .HasColumnName("SYS_CHANGE_VERSION")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("SysChangeOperation")
                        .IsRequired()
                        .HasColumnName("SYS_CHANGE_OPERATION")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("JobId", "GroupId", "SysChangeVersion");

                    b.ToTable("JobAvailableToGroup","Request");
                });

            modelBuilder.Entity("Scaffolding.Models.JobQuestions", b =>
                {
                    b.Property<int>("JobId")
                        .HasColumnName("JobID")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnName("QuestionID")
                        .HasColumnType("int");

                    b.Property<int>("SysChangeVersion")
                        .HasColumnName("SYS_CHANGE_VERSION")
                        .HasColumnType("int");

                    b.Property<string>("Answer")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<DateTime>("DateFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("SysChangeOperation")
                        .IsRequired()
                        .HasColumnName("SYS_CHANGE_OPERATION")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("JobId", "QuestionId", "SysChangeVersion");

                    b.ToTable("JobQuestions","Request");
                });

            modelBuilder.Entity("Scaffolding.Models.JobStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("int");

                    b.Property<int>("SysChangeVersion")
                        .HasColumnName("SYS_CHANGE_VERSION")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SysChangeOperation")
                        .IsRequired()
                        .HasColumnName("SYS_CHANGE_OPERATION")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("Id", "SysChangeVersion");

                    b.ToTable("JobStatus","Lookup");
                });

            modelBuilder.Entity("Scaffolding.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("SysChangeVersion")
                        .HasColumnName("SYS_CHANGE_VERSION")
                        .HasColumnType("int");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("AddressLine2")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("AddressLine3")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime>("DateFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Instructions")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(9, 6)");

                    b.Property<string>("Locality")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(9, 6)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("PostCode")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("ShortName")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("SysChangeOperation")
                        .IsRequired()
                        .HasColumnName("SYS_CHANGE_OPERATION")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("Id", "SysChangeVersion");

                    b.ToTable("Location","Address");
                });

            modelBuilder.Entity("Scaffolding.Models.Location2", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("int");

                    b.Property<int>("SysChangeVersion")
                        .HasColumnName("SYS_CHANGE_VERSION")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SysChangeOperation")
                        .IsRequired()
                        .HasColumnName("SYS_CHANGE_OPERATION")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("Id", "SysChangeVersion");

                    b.ToTable("Location","Lookup");
                });

            modelBuilder.Entity("Scaffolding.Models.LocationPostcodes", b =>
                {
                    b.Property<string>("Location")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("Postcode")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("Area")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<int?>("GroupId")
                        .HasColumnName("GroupID")
                        .HasColumnType("int");

                    b.HasKey("Location", "Postcode")
                        .HasName("PK__Location__512B029FCCC038BB");

                    b.ToTable("LocationPostcodes","Analysis");
                });

            modelBuilder.Entity("Scaffolding.Models.LogRequestEvent", b =>
                {
                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<byte>("RequestEventId")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("DateRequested")
                        .HasColumnType("datetime");

                    b.Property<int>("SysChangeVersion")
                        .HasColumnName("SYS_CHANGE_VERSION")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("JobId")
                        .HasColumnType("int");

                    b.Property<string>("SysChangeOperation")
                        .IsRequired()
                        .HasColumnName("SYS_CHANGE_OPERATION")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RequestId", "RequestEventId", "DateRequested", "SysChangeVersion");

                    b.ToTable("LogRequestEvent","Request");
                });

            modelBuilder.Entity("Scaffolding.Models.MonitoringTimestamps", b =>
                {
                    b.Property<string>("Activity")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("RunId")
                        .HasColumnName("RunID")
                        .HasColumnType("int");

                    b.Property<string>("Trigger")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<bool>("Start")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ProcessedTo")
                        .HasColumnType("datetime");

                    b.Property<int?>("RowsAffected")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Timestamp")
                        .HasColumnType("datetime");

                    b.HasKey("Activity", "RunId", "Trigger", "Start")
                        .HasName("PK__Monitori__EA1CFA03357523B9");

                    b.ToTable("MonitoringTimestamps","Monitoring");
                });

            modelBuilder.Entity("Scaffolding.Models.MonthlyStats", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnName("GroupID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime");

                    b.Property<int?>("ActiveVols")
                        .HasColumnType("int");

                    b.Property<int?>("Admins")
                        .HasColumnType("int");

                    b.Property<string>("GroupName")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Jobs")
                        .HasColumnType("int");

                    b.Property<string>("JobsCancelled")
                        .HasColumnName("Jobs_Cancelled")
                        .HasColumnType("varchar(6)")
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<string>("JobsCompleted")
                        .HasColumnName("Jobs_Completed")
                        .HasColumnType("varchar(6)")
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<string>("JobsOverdue")
                        .HasColumnName("Jobs_Overdue")
                        .HasColumnType("varchar(6)")
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<int?>("Members")
                        .HasColumnType("int");

                    b.Property<int?>("NonMemberVols")
                        .HasColumnType("int");

                    b.Property<int?>("OtherCredentials")
                        .HasColumnType("int");

                    b.Property<int?>("Requests")
                        .HasColumnType("int");

                    b.Property<string>("Subgroup")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("TimePeriod")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("TopActivities")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<int?>("YotiIds")
                        .HasColumnName("YotiIDs")
                        .HasColumnType("int");

                    b.HasKey("GroupId", "Timestamp")
                        .HasName("PK__MonthlyS__EC10CAA9CA65B25F");

                    b.ToTable("MonthlyStats","Monitoring");
                });

            modelBuilder.Entity("Scaffolding.Models.NewRequestNotificationStrategy", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnName("GroupID")
                        .HasColumnType("int");

                    b.Property<int>("SysChangeVersion")
                        .HasColumnName("SYS_CHANGE_VERSION")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("MaxVolunteer")
                        .HasColumnType("int");

                    b.Property<byte?>("NewRequestNotificationStrategyId")
                        .HasColumnType("tinyint");

                    b.Property<string>("SysChangeOperation")
                        .IsRequired()
                        .HasColumnName("SYS_CHANGE_OPERATION")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("GroupId", "SysChangeVersion");

                    b.ToTable("NewRequestNotificationStrategy","Group");
                });

            modelBuilder.Entity("Scaffolding.Models.NewRequestNotificationStrategy2", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("int");

                    b.Property<int>("SysChangeVersion")
                        .HasColumnName("SYS_CHANGE_VERSION")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SysChangeOperation")
                        .IsRequired()
                        .HasColumnName("SYS_CHANGE_OPERATION")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("Id", "SysChangeVersion");

                    b.ToTable("NewRequestNotificationStrategy","Lookup");
                });

            modelBuilder.Entity("Scaffolding.Models.Postcode", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("SysChangeVersion")
                        .HasColumnName("SYS_CHANGE_VERSION")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("FriendlyName")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(9, 6)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(9, 6)");

                    b.Property<string>("Postcode1")
                        .HasColumnName("Postcode")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("SysChangeOperation")
                        .IsRequired()
                        .HasColumnName("SYS_CHANGE_OPERATION")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("Id", "SysChangeVersion");

                    b.ToTable("Postcode","Address");
                });

            modelBuilder.Entity("Scaffolding.Models.PostcodeLookup", b =>
                {
                    b.Property<string>("PostcodeDistrict")
                        .HasColumnType("varchar(4)")
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.Property<int?>("ActivePostcodes")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("Locality")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("Region")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("Town")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.HasKey("PostcodeDistrict")
                        .HasName("PK__Postcode__6235C9C1310092D5");

                    b.ToTable("PostcodeLookup","Analysis");
                });

            modelBuilder.Entity("Scaffolding.Models.PreComputedNearestPostcodes", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("SysChangeVersion")
                        .HasColumnName("SYS_CHANGE_VERSION")
                        .HasColumnType("int");

                    b.Property<byte[]>("CompressedNearestPostcodes")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("DateFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Postcode")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("SysChangeOperation")
                        .IsRequired()
                        .HasColumnName("SYS_CHANGE_OPERATION")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("Id", "SysChangeVersion");

                    b.ToTable("PreComputedNearestPostcodes","Address");
                });

            modelBuilder.Entity("Scaffolding.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("int");

                    b.Property<int>("SysChangeVersion")
                        .HasColumnName("SYS_CHANGE_VERSION")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SysChangeOperation")
                        .IsRequired()
                        .HasColumnName("SYS_CHANGE_OPERATION")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("Id", "SysChangeVersion");

                    b.ToTable("Question","Lookup");
                });

            modelBuilder.Entity("Scaffolding.Models.Question2", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("int");

                    b.Property<int>("SysChangeVersion")
                        .HasColumnName("SYS_CHANGE_VERSION")
                        .HasColumnType("int");

                    b.Property<string>("AdditionalData")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<DateTime>("DateFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<byte?>("QuestionType")
                        .HasColumnType("tinyint");

                    b.Property<bool?>("Required")
                        .HasColumnType("bit");

                    b.Property<string>("SysChangeOperation")
                        .IsRequired()
                        .HasColumnName("SYS_CHANGE_OPERATION")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("Id", "SysChangeVersion");

                    b.ToTable("Question","QuestionSet");
                });

            modelBuilder.Entity("Scaffolding.Models.QuestionType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("int");

                    b.Property<int>("SysChangeVersion")
                        .HasColumnName("SYS_CHANGE_VERSION")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SysChangeOperation")
                        .IsRequired()
                        .HasColumnName("SYS_CHANGE_OPERATION")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("Id", "SysChangeVersion");

                    b.ToTable("QuestionType","Lookup");
                });

            modelBuilder.Entity("Scaffolding.Models.RegistrationFormVariant", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("int");

                    b.Property<int>("SysChangeVersion")
                        .HasColumnName("SYS_CHANGE_VERSION")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SysChangeOperation")
                        .IsRequired()
                        .HasColumnName("SYS_CHANGE_OPERATION")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("Id", "SysChangeVersion");

                    b.ToTable("RegistrationFormVariant","Lookup");
                });

            modelBuilder.Entity("Scaffolding.Models.RegistrationHistory", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("UserID")
                        .HasColumnType("int");

                    b.Property<byte>("RegistrationStep")
                        .HasColumnType("tinyint");

                    b.Property<int>("SysChangeVersion")
                        .HasColumnName("SYS_CHANGE_VERSION")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCompleted")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("SysChangeOperation")
                        .IsRequired()
                        .HasColumnName("SYS_CHANGE_OPERATION")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("UserId", "RegistrationStep", "SysChangeVersion");

                    b.ToTable("RegistrationHistory","User");
                });

            modelBuilder.Entity("Scaffolding.Models.RegistrationJourney", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("SysChangeVersion")
                        .HasColumnName("SYS_CHANGE_VERSION")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte?>("RegistrationFormVariant")
                        .HasColumnType("tinyint");

                    b.Property<string>("SysChangeOperation")
                        .IsRequired()
                        .HasColumnName("SYS_CHANGE_OPERATION")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("GroupId", "Source", "SysChangeVersion");

                    b.ToTable("RegistrationJourney","Website");
                });

            modelBuilder.Entity("Scaffolding.Models.Request", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("int");

                    b.Property<int>("SysChangeVersion")
                        .HasColumnName("SYS_CHANGE_VERSION")
                        .HasColumnType("int");

                    b.Property<bool?>("AcceptedTerms")
                        .HasColumnType("bit");

                    b.Property<bool?>("Archive")
                        .HasColumnType("bit");

                    b.Property<bool?>("CommunicationSent")
                        .HasColumnType("bit");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnName("CreatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DateRequested")
                        .HasColumnType("datetime");

                    b.Property<bool?>("ForRequestor")
                        .HasColumnType("bit");

                    b.Property<byte?>("FulfillableStatus")
                        .HasColumnType("tinyint");

                    b.Property<Guid?>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsFulfillable")
                        .HasColumnType("bit");

                    b.Property<bool?>("MultiVolunteer")
                        .HasColumnType("bit");

                    b.Property<string>("OrganisationName")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("OtherDetails")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<Guid?>("ParentGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("PersonIdRecipient")
                        .HasColumnName("PersonID_Recipient")
                        .HasColumnType("int");

                    b.Property<int?>("PersonIdRequester")
                        .HasColumnName("PersonID_Requester")
                        .HasColumnType("int");

                    b.Property<string>("PostCode")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<bool?>("ReadPrivacyNotice")
                        .HasColumnType("bit");

                    b.Property<int?>("ReferringGroupId")
                        .HasColumnType("int");

                    b.Property<bool?>("Repeat")
                        .HasColumnType("bit");

                    b.Property<byte?>("RequestType")
                        .HasColumnType("tinyint");

                    b.Property<bool?>("RequestorDefinedByGroup")
                        .HasColumnType("bit");

                    b.Property<byte?>("RequestorType")
                        .HasColumnType("tinyint");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecialCommunicationNeeds")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<bool?>("SuppressRecipientPersonalDetail")
                        .HasColumnType("bit");

                    b.Property<string>("SysChangeOperation")
                        .IsRequired()
                        .HasColumnName("SYS_CHANGE_OPERATION")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("Id", "SysChangeVersion");

                    b.ToTable("Request","Request");
                });

            modelBuilder.Entity("Scaffolding.Models.RequestEvent", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("int");

                    b.Property<int>("SysChangeVersion")
                        .HasColumnName("SYS_CHANGE_VERSION")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SysChangeOperation")
                        .IsRequired()
                        .HasColumnName("SYS_CHANGE_OPERATION")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("Id", "SysChangeVersion");

                    b.ToTable("RequestEvent","Lookup");
                });

            modelBuilder.Entity("Scaffolding.Models.RequestFormStage", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("int");

                    b.Property<int>("SysChangeVersion")
                        .HasColumnName("SYS_CHANGE_VERSION")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SysChangeOperation")
                        .IsRequired()
                        .HasColumnName("SYS_CHANGE_OPERATION")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("Id", "SysChangeVersion");

                    b.ToTable("RequestFormStage","Lookup");
                });

            modelBuilder.Entity("Scaffolding.Models.RequestFormVariant", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("int");

                    b.Property<int>("SysChangeVersion")
                        .HasColumnName("SYS_CHANGE_VERSION")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SysChangeOperation")
                        .IsRequired()
                        .HasColumnName("SYS_CHANGE_OPERATION")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("Id", "SysChangeVersion");

                    b.ToTable("RequestFormVariant","Lookup");
                });

            modelBuilder.Entity("Scaffolding.Models.RequestHelpFormVariant", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("int");

                    b.Property<int>("SysChangeVersion")
                        .HasColumnName("SYS_CHANGE_VERSION")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SysChangeOperation")
                        .IsRequired()
                        .HasColumnName("SYS_CHANGE_OPERATION")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("Id", "SysChangeVersion");

                    b.ToTable("RequestHelpFormVariant","Lookup");
                });

            modelBuilder.Entity("Scaffolding.Models.RequestHelpJourney", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("SysChangeVersion")
                        .HasColumnName("SYS_CHANGE_VERSION")
                        .HasColumnType("int");

                    b.Property<bool?>("AccessRestrictedByRole")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte?>("RequestHelpFormVariant")
                        .HasColumnType("tinyint");

                    b.Property<bool?>("RequestorDefinedByGroup")
                        .HasColumnType("bit");

                    b.Property<bool?>("RequestsRequireApproval")
                        .HasColumnType("bit");

                    b.Property<bool?>("SuppressRecipientPersonalDetails")
                        .HasColumnType("bit");

                    b.Property<string>("SysChangeOperation")
                        .IsRequired()
                        .HasColumnName("SYS_CHANGE_OPERATION")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<int?>("TargetGroups")
                        .HasColumnType("int");

                    b.HasKey("GroupId", "Source", "SysChangeVersion");

                    b.ToTable("RequestHelpJourney","Website");
                });

            modelBuilder.Entity("Scaffolding.Models.RequestJobStatus", b =>
                {
                    b.Property<int>("JobId")
                        .HasColumnName("JobID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<byte>("JobStatusId")
                        .HasColumnName("JobStatusID")
                        .HasColumnType("tinyint");

                    b.Property<int>("SysChangeVersion")
                        .HasColumnName("SYS_CHANGE_VERSION")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnName("CreatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("SysChangeOperation")
                        .IsRequired()
                        .HasColumnName("SYS_CHANGE_OPERATION")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<int?>("VolunteerUserId")
                        .HasColumnName("VolunteerUserID")
                        .HasColumnType("int");

                    b.HasKey("JobId", "DateCreated", "JobStatusId", "SysChangeVersion");

                    b.ToTable("RequestJobStatus","Request");
                });

            modelBuilder.Entity("Scaffolding.Models.RequestRoles", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("int");

                    b.Property<int>("SysChangeVersion")
                        .HasColumnName("SYS_CHANGE_VERSION")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SysChangeOperation")
                        .IsRequired()
                        .HasColumnName("SYS_CHANGE_OPERATION")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("Id", "SysChangeVersion");

                    b.ToTable("RequestRoles","Lookup");
                });

            modelBuilder.Entity("Scaffolding.Models.RequestSubmission", b =>
                {
                    b.Property<int>("RequestId")
                        .HasColumnName("RequestID")
                        .HasColumnType("int");

                    b.Property<int>("SysChangeVersion")
                        .HasColumnName("SYS_CHANGE_VERSION")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte?>("FreqencyId")
                        .HasColumnName("FreqencyID")
                        .HasColumnType("tinyint");

                    b.Property<int?>("NumberOfRepeats")
                        .HasColumnType("int");

                    b.Property<string>("SysChangeOperation")
                        .IsRequired()
                        .HasColumnName("SYS_CHANGE_OPERATION")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("RequestId", "SysChangeVersion");

                    b.ToTable("RequestSubmission","Request");
                });

            modelBuilder.Entity("Scaffolding.Models.RequestType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("int");

                    b.Property<int>("SysChangeVersion")
                        .HasColumnName("SYS_CHANGE_VERSION")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SysChangeOperation")
                        .IsRequired()
                        .HasColumnName("SYS_CHANGE_OPERATION")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("Id", "SysChangeVersion");

                    b.ToTable("RequestType","Lookup");
                });

            modelBuilder.Entity("Scaffolding.Models.RequestorType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("int");

                    b.Property<int>("SysChangeVersion")
                        .HasColumnName("SYS_CHANGE_VERSION")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SysChangeOperation")
                        .IsRequired()
                        .HasColumnName("SYS_CHANGE_OPERATION")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("Id", "SysChangeVersion");

                    b.ToTable("RequestorType","Lookup");
                });

            modelBuilder.Entity("Scaffolding.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("int");

                    b.Property<int>("SysChangeVersion")
                        .HasColumnName("SYS_CHANGE_VERSION")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SysChangeOperation")
                        .IsRequired()
                        .HasColumnName("SYS_CHANGE_OPERATION")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("Id", "SysChangeVersion");

                    b.ToTable("Role","Lookup");
                });

            modelBuilder.Entity("Scaffolding.Models.SecurityConfiguration", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnName("GroupID")
                        .HasColumnType("int");

                    b.Property<int>("SysChangeVersion")
                        .HasColumnName("SYS_CHANGE_VERSION")
                        .HasColumnType("int");

                    b.Property<bool?>("AllowAutonomousJoinersAndLeavers")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("SysChangeOperation")
                        .IsRequired()
                        .HasColumnName("SYS_CHANGE_OPERATION")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("GroupId", "SysChangeVersion");

                    b.ToTable("SecurityConfiguration","Group");
                });

            modelBuilder.Entity("Scaffolding.Models.Shift", b =>
                {
                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<int>("SysChangeVersion")
                        .HasColumnName("SYS_CHANGE_VERSION")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<int?>("ShiftLength")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SysChangeOperation")
                        .IsRequired()
                        .HasColumnName("SYS_CHANGE_OPERATION")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("RequestId", "SysChangeVersion");

                    b.ToTable("Shift","Request");
                });

            modelBuilder.Entity("Scaffolding.Models.SupportActivities", b =>
                {
                    b.Property<int>("RequestId")
                        .HasColumnName("RequestID")
                        .HasColumnType("int");

                    b.Property<int>("ActivityId")
                        .HasColumnName("ActivityID")
                        .HasColumnType("int");

                    b.Property<int>("SysChangeVersion")
                        .HasColumnName("SYS_CHANGE_VERSION")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("SysChangeOperation")
                        .IsRequired()
                        .HasColumnName("SYS_CHANGE_OPERATION")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("RequestId", "ActivityId", "SysChangeVersion");

                    b.ToTable("SupportActivities","Request");
                });

            modelBuilder.Entity("Scaffolding.Models.SupportActivity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("int");

                    b.Property<int>("SysChangeVersion")
                        .HasColumnName("SYS_CHANGE_VERSION")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SysChangeOperation")
                        .IsRequired()
                        .HasColumnName("SYS_CHANGE_OPERATION")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("Id", "SysChangeVersion");

                    b.ToTable("SupportActivity","Lookup");
                });

            modelBuilder.Entity("Scaffolding.Models.SupportActivity2", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("UserID")
                        .HasColumnType("int");

                    b.Property<byte>("ActivityId")
                        .HasColumnName("ActivityID")
                        .HasColumnType("tinyint");

                    b.Property<int>("SysChangeVersion")
                        .HasColumnName("SYS_CHANGE_VERSION")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("SysChangeOperation")
                        .IsRequired()
                        .HasColumnName("SYS_CHANGE_OPERATION")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("UserId", "ActivityId", "SysChangeVersion");

                    b.ToTable("SupportActivity","User");
                });

            modelBuilder.Entity("Scaffolding.Models.SupportActivityInstructions", b =>
                {
                    b.Property<short>("SupportActivityInstructionsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SupportActivityInstructionsID")
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SysChangeVersion")
                        .HasColumnName("SYS_CHANGE_VERSION")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Instructions")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("SysChangeOperation")
                        .IsRequired()
                        .HasColumnName("SYS_CHANGE_OPERATION")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("SupportActivityInstructionsId", "SysChangeVersion");

                    b.ToTable("SupportActivityInstructions","Group");
                });

            modelBuilder.Entity("Scaffolding.Models.SupportActivityInstructions2", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("int");

                    b.Property<int>("SysChangeVersion")
                        .HasColumnName("SYS_CHANGE_VERSION")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SysChangeOperation")
                        .IsRequired()
                        .HasColumnName("SYS_CHANGE_OPERATION")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("Id", "SysChangeVersion");

                    b.ToTable("SupportActivityInstructions","Lookup");
                });

            modelBuilder.Entity("Scaffolding.Models.TargetGroup", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("int");

                    b.Property<int>("SysChangeVersion")
                        .HasColumnName("SYS_CHANGE_VERSION")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SysChangeOperation")
                        .IsRequired()
                        .HasColumnName("SYS_CHANGE_OPERATION")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("Id", "SysChangeVersion");

                    b.ToTable("TargetGroup","Lookup");
                });

            modelBuilder.Entity("Scaffolding.Models.TestRequests", b =>
                {
                    b.Property<int>("RequestId")
                        .HasColumnName("RequestID")
                        .HasColumnType("int");

                    b.Property<string>("Details")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.HasKey("RequestId")
                        .HasName("PK__TestRequ__33A8519AEEE3E890");

                    b.ToTable("TestRequests","Maintenance");
                });

            modelBuilder.Entity("Scaffolding.Models.UpdateHistory", b =>
                {
                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<string>("FieldChanged")
                        .HasColumnType("varchar(900)")
                        .IsUnicode(false);

                    b.Property<int>("SysChangeVersion")
                        .HasColumnName("SYS_CHANGE_VERSION")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnName("CreatedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("NewValue")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("OldValue")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<int?>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("SysChangeOperation")
                        .IsRequired()
                        .HasColumnName("SYS_CHANGE_OPERATION")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("RequestId", "JobId", "DateCreated", "FieldChanged", "SysChangeVersion")
                        .HasName("PK_UpddateHistory");

                    b.ToTable("UpdateHistory","Request");
                });

            modelBuilder.Entity("Scaffolding.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("int");

                    b.Property<int>("SysChangeVersion")
                        .HasColumnName("SYS_CHANGE_VERSION")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("EmailSharingConsent")
                        .HasColumnType("bit");

                    b.Property<string>("FirebaseUid")
                        .HasColumnName("FirebaseUID")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("HmscontactConsent")
                        .HasColumnName("HMSContactConsent")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsVolunteer")
                        .HasColumnType("bit");

                    b.Property<bool?>("MobileSharingConsent")
                        .HasColumnType("bit");

                    b.Property<bool?>("OtherPhoneSharingConsent")
                        .HasColumnType("bit");

                    b.Property<string>("PostalCode")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<int?>("ReferringGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StreetChampionRoleUnderstood")
                        .HasColumnType("bit");

                    b.Property<double?>("SupportRadiusMiles")
                        .HasColumnType("float");

                    b.Property<bool?>("SupportVolunteersByPhone")
                        .HasColumnType("bit");

                    b.Property<string>("SysChangeOperation")
                        .IsRequired()
                        .HasColumnName("SYS_CHANGE_OPERATION")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("Id", "SysChangeVersion");

                    b.ToTable("User","User");
                });

            modelBuilder.Entity("Scaffolding.Models.UserCredential", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnName("GroupID")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnName("UserID")
                        .HasColumnType("int");

                    b.Property<int>("CredentialId")
                        .HasColumnName("CredentialID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime");

                    b.Property<int>("SysChangeVersion")
                        .HasColumnName("SYS_CHANGE_VERSION")
                        .HasColumnType("int");

                    b.Property<int?>("AuthorisedByUserId")
                        .HasColumnName("AuthorisedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Notes")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("Reference")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("SysChangeOperation")
                        .IsRequired()
                        .HasColumnName("SYS_CHANGE_OPERATION")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ValidUntil")
                        .HasColumnType("datetime");

                    b.HasKey("GroupId", "UserId", "CredentialId", "DateAdded", "SysChangeVersion");

                    b.ToTable("UserCredential","Group");
                });

            modelBuilder.Entity("Scaffolding.Models.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("UserID")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnName("RoleID")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnName("GroupID")
                        .HasColumnType("int");

                    b.Property<int>("SysChangeVersion")
                        .HasColumnName("SYS_CHANGE_VERSION")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("SysChangeOperation")
                        .IsRequired()
                        .HasColumnName("SYS_CHANGE_OPERATION")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.HasKey("UserId", "RoleId", "GroupId", "SysChangeVersion");

                    b.ToTable("UserRole","Group");
                });

            modelBuilder.Entity("Scaffolding.Models.UserRoleAudit", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("SysChangeVersion")
                        .HasColumnName("SYS_CHANGE_VERSION")
                        .HasColumnType("int");

                    b.Property<byte?>("ActionId")
                        .HasColumnName("ActionID")
                        .HasColumnType("tinyint");

                    b.Property<int?>("AuthorisedByUserId")
                        .HasColumnName("AuthorisedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DateRequested")
                        .HasColumnType("datetime");

                    b.Property<int?>("GroupId")
                        .HasColumnName("GroupID")
                        .HasColumnType("int");

                    b.Property<int?>("RoleId")
                        .HasColumnName("RoleID")
                        .HasColumnType("int");

                    b.Property<bool?>("Success")
                        .HasColumnType("bit");

                    b.Property<string>("SysChangeOperation")
                        .IsRequired()
                        .HasColumnName("SYS_CHANGE_OPERATION")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<int?>("UserId")
                        .HasColumnName("UserID")
                        .HasColumnType("int");

                    b.HasKey("Id", "SysChangeVersion");

                    b.ToTable("UserRoleAudit","Group");
                });

            modelBuilder.Entity("Scaffolding.Models.VerificationAttempt", b =>
                {
                    b.Property<bool?>("AgeMatch")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DateOfAttempt")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<bool?>("DobMatch")
                        .HasColumnType("bit");

                    b.Property<bool?>("NotPreviouslyVerified")
                        .HasColumnType("bit");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<bool?>("UserServiceUpdated")
                        .HasColumnType("bit");

                    b.Property<bool?>("Verified")
                        .HasColumnType("bit");

                    b.Property<string>("YotiRememberMeId")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.ToTable("VerificationAttempt","Verification");
                });

            modelBuilder.Entity("Scaffolding.Models.VerificationAttempt2", b =>
                {
                    b.Property<bool?>("AgeMatch")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DateOfAttempt")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<bool?>("DobMatch")
                        .HasColumnType("bit");

                    b.Property<bool?>("NotPreviouslyVerified")
                        .HasColumnType("bit");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<bool?>("UserServiceUpdated")
                        .HasColumnType("bit");

                    b.Property<bool?>("Verified")
                        .HasColumnType("bit");

                    b.Property<string>("YotiRememberMeId")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.ToTable("VerificationAttempt2","Verification");
                });
#pragma warning restore 612, 618
        }
    }
}
